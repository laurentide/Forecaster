<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 11.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="11.0">
 <Targets>
  <Target Name="C:\Data\Projects\Forecaster\Forecaster\bin\Forecaster.dll">
   <Modules>
    <Module Name="forecaster.dll">
     <Namespaces>
      <Namespace Name="Forecaster">
       <Types>
        <Type Name="_getForecastByUser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type '_getForecastByUser'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="_getForecastByUser+getForecastByUserDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type '_getForecastByUser.getForecastByUserDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="AROutstanding" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Update(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Credit" File="AROutstanding.aspx.vb" Line="43">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'AROutstanding.Update(Object, EventArgs)' could contain the following variables '"select count(*) from [Nomis].[dbo].[tblARCust] where custNumber = " &amp; Me.Session("CustNumber")'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Building" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#frmInsert_DataBound(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Building" File="Building.aspx.vb" Line="24">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Building.frmInsert_DataBound(Object, EventArgs)' could contain the following variables '"select givenname + ' ' + sn as IssuedBy,mail as Email from vwEmployees where 'L..." &amp; Me.Session("Username") &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmInsert_ItemInserted(System.Object,System.Web.UI.WebControls.FormViewInsertedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Building" File="Building.aspx.vb" Line="54">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Building.frmInsert_ItemInserted(Object, FormViewInsertedEventArgs)' could contain the following variables '"update tblBuildingRequests set Filename = '" &amp; DirectCast(Me.frmInsert.FindControl("fudialog"), FileUpload).FileName &amp; "', Path = '" &amp; savePath &amp; DirectCast(Me.frmInsert.FindControl("fudialog"), FileUpload).FileName &amp; "' where RequestID = " &amp; Me.Session("ID")'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmInsert_ItemUpdated(System.Object,System.Web.UI.WebControls.FormViewUpdatedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Building" File="Building.aspx.vb" Line="89">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Building.frmInsert_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'New String(7)(1)', 'DirectCast(Me.frmInsert.FindControl("RequestIDLabel1"), Label).Text', 'New String(7)(4)', 'New String(7)(6)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BuildingManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ddlAssignments_SelectedIndexChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Building" File="BuildingManager.aspx.vb" Line="74">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'BuildingManager.ddlAssignments_SelectedIndexChanged(Object, EventArgs)' could contain the following variables 'DirectCast(Me.frmInsert.FindControl("ddlAssignments"), DropDownList).SelectedItem.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmInsert_ItemUpdated(System.Object,System.Web.UI.WebControls.FormViewUpdatedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Building" File="BuildingManager.aspx.vb" Line="32">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'BuildingManager.frmInsert_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'New String(7)(1)', 'DirectCast(Me.frmInsert.FindControl("RequestIDLabel1"), Label).Text', 'New String(7)(4)', 'New String(7)(6)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Expense" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ddlExpenseCategories_SelectedIndexChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="Expense.aspx.vb" Line="111">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Expense.ddlExpenseCategories_SelectedIndexChanged(Object, EventArgs)' could contain the following variables 'ddlExpenseCategories.SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#findCategory(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="Expense.aspx.vb" Line="332">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Expense.findCategory(Object)' could contain the following variables '"select category from  dbo.tblExpenseCategories where categoryid =" &amp; categoryid'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#findProvince(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="Expense.aspx.vb" Line="351">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Expense.findProvince(Object)' could contain the following variables '"select Province from  dbo.tblProvinceRates where provinceID =" &amp; provinceID'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#findType(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="Expense.aspx.vb" Line="369">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Expense.findType(Object)' could contain the following variables '"select ExpenseType from  dbo.tblExpenseTypes where ExpenseTypeID =" &amp; ExpenseTypeID'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmExpense_DataBound(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="Expense.aspx.vb" Line="277">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Expense.frmExpense_DataBound(Object, EventArgs)' could contain the following variables '"select sn + ' ' + givenname as EmployeeName,mail as Email from vwEmployees wher..." &amp; Me.Session("Username") &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="Expense.aspx.vb" Line="297">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Expense.frmExpense_DataBound(Object, EventArgs)' could contain the following variables 'DirectCast(Me.frmExpense.FindControl("ExpenseReportIDLabel"), Label).Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmExpense_ItemInserted(System.Object,System.Web.UI.WebControls.FormViewInsertedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="Expense.aspx.vb" Line="192">Object 'destinationConnection' can be disposed more than once in method 'Expense.frmExpense_ItemInserted(Object, FormViewInsertedEventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 192</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmExpense_ItemUpdated(System.Object,System.Web.UI.WebControls.FormViewUpdatedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="Expense.aspx.vb" Line="434">Object 'destinationConnection' can be disposed more than once in method 'Expense.frmExpense_ItemUpdated(Object, FormViewUpdatedEventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 434</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="Expense.aspx.vb" Line="415">The query string passed to 'SqlCommand.New(String)' in 'Expense.frmExpense_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'DirectCast(Me.frmExpense.FindControl("ExpenseReportIDLabel"), Label).Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#gvExpenseDetails_SelectedIndexChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="Expense.aspx.vb" Line="537">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Expense.gvExpenseDetails_SelectedIndexChanged(Object, EventArgs)' could contain the following variables '"select * from tblExpenseTypes where CategoryID = " &amp; dtrow("CategoryID")'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExpenseAdmin" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ddlExpenseCategories_SelectedIndexChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="ExpenseAdmin.aspx.vb" Line="94">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'ExpenseAdmin.ddlExpenseCategories_SelectedIndexChanged(Object, EventArgs)' could contain the following variables 'ddlExpenseCategories.SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#findCategory(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="ExpenseAdmin.aspx.vb" Line="314">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'ExpenseAdmin.findCategory(Object)' could contain the following variables '"select category from  dbo.tblExpenseCategories where categoryid =" &amp; categoryid'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#findProvince(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="ExpenseAdmin.aspx.vb" Line="333">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'ExpenseAdmin.findProvince(Object)' could contain the following variables '"select Province from  dbo.tblProvinceRates where provinceID =" &amp; provinceID'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#findType(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="ExpenseAdmin.aspx.vb" Line="351">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'ExpenseAdmin.findType(Object)' could contain the following variables '"select ExpenseType from  dbo.tblExpenseTypes where ExpenseTypeID =" &amp; ExpenseTypeID'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmExpense_DataBound(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="ExpenseAdmin.aspx.vb" Line="259">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'ExpenseAdmin.frmExpense_DataBound(Object, EventArgs)' could contain the following variables '"select sn + ' ' + givenname as EmployeeName,mail as Email from vwEmployees wher..." &amp; Me.Session("Username") &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="ExpenseAdmin.aspx.vb" Line="279">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'ExpenseAdmin.frmExpense_DataBound(Object, EventArgs)' could contain the following variables 'DirectCast(Me.frmExpense.FindControl("ExpenseReportIDLabel"), Label).Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmExpense_ItemInserted(System.Object,System.Web.UI.WebControls.FormViewInsertedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="ExpenseAdmin.aspx.vb" Line="174">Object 'destinationConnection' can be disposed more than once in method 'ExpenseAdmin.frmExpense_ItemInserted(Object, FormViewInsertedEventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 174</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmExpense_ItemUpdated(System.Object,System.Web.UI.WebControls.FormViewUpdatedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="ExpenseAdmin.aspx.vb" Line="417">Object 'destinationConnection' can be disposed more than once in method 'ExpenseAdmin.frmExpense_ItemUpdated(Object, FormViewUpdatedEventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 417</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="ExpenseAdmin.aspx.vb" Line="397">The query string passed to 'SqlCommand.New(String)' in 'ExpenseAdmin.frmExpense_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'DirectCast(Me.frmExpense.FindControl("ExpenseReportIDLabel"), Label).Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#gvExpenseDetails_SelectedIndexChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Expense" File="ExpenseAdmin.aspx.vb" Line="512">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'ExpenseAdmin.gvExpenseDetails_SelectedIndexChanged(Object, EventArgs)' could contain the following variables '"select * from tblExpenseTypes where CategoryID = " &amp; dtrow("CategoryID")'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Forecasts" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Update(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Forecast" File="Forecasts.aspx.vb" Line="215">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Forecasts.Update(Object, EventArgs)' could contain the following variables 'sb.ToString()'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Funnel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Delete(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel.aspx.vb" Line="454">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel.Delete(Object, EventArgs)' could contain the following variables 'DirectCast(Me.frmUpdate.FindControl("OpportunityIDLabel"), Label).Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#gvAssignments_RowCommand(System.Object,System.Web.UI.WebControls.GridViewCommandEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel.aspx.vb" Line="631">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel.gvAssignments_RowCommand(Object, GridViewCommandEventArgs)' could contain the following variables 'New String(5)(1)', 'DirectCast(DirectCast(sender, GridView).Controls(0).Controls(0).FindControl("NewContributor"), DropDownList).Text', 'DirectCast(NewLateBinding.LateGet(NewLateBinding.LateGet(sender, Nothing, "FooterRow", New Object(0), Nothing, Nothing, Nothing), Nothing, "FindControl", New Object(1), Nothing, Nothing, Nothing), DropDownList).Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Insert(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel.aspx.vb" Line="412">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel.Insert(Object, EventArgs)' could contain the following variables '"INSERT INTO [Forecaster].[dbo].[tblOpportunityAssignments]  ([OpportunityID],[S..." &amp; Conversions.ToString(intLastIdentity) &amp; "," &amp; itm &amp; ")"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel.aspx.vb" Line="401">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel.Insert(Object, EventArgs)' could contain the following variables 'Conversions.ToString(intLastIdentity)', 'Conversions.ToString(intLastIdentity)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel.aspx.vb" Line="397">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel.Insert(Object, EventArgs)' could contain the following variables 'sb.ToString()'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Update(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel.aspx.vb" Line="250">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel.Update(Object, EventArgs)' could contain the following variables '"update tblopportunities set total = (select sum(total * (percentage/100)) from ..." &amp; Me.Session("OpportunityID") &amp; ") where opportunityid =" &amp; Me.Session("OpportunityID")'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel.aspx.vb" Line="246">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel.Update(Object, EventArgs)' could contain the following variables 'sb.ToString()'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Funnel_PSS" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Delete(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel_PSS.aspx.vb" Line="454">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel_PSS.Delete(Object, EventArgs)' could contain the following variables 'DirectCast(Me.frmUpdate.FindControl("OpportunityIDLabel"), Label).Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#gvAssignments_RowCommand(System.Object,System.Web.UI.WebControls.GridViewCommandEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel_PSS.aspx.vb" Line="631">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel_PSS.gvAssignments_RowCommand(Object, GridViewCommandEventArgs)' could contain the following variables 'New String(5)(1)', 'DirectCast(DirectCast(sender, GridView).Controls(0).Controls(0).FindControl("NewContributor"), DropDownList).Text', 'DirectCast(NewLateBinding.LateGet(NewLateBinding.LateGet(sender, Nothing, "FooterRow", New Object(0), Nothing, Nothing, Nothing), Nothing, "FindControl", New Object(1), Nothing, Nothing, Nothing), DropDownList).Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Insert(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel_PSS.aspx.vb" Line="412">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel_PSS.Insert(Object, EventArgs)' could contain the following variables '"INSERT INTO [Forecaster].[dbo].[tblOpportunityAssignments]  ([OpportunityID],[S..." &amp; Conversions.ToString(intLastIdentity) &amp; "," &amp; itm &amp; ")"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel_PSS.aspx.vb" Line="401">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel_PSS.Insert(Object, EventArgs)' could contain the following variables 'Conversions.ToString(intLastIdentity)', 'Conversions.ToString(intLastIdentity)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel_PSS.aspx.vb" Line="397">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel_PSS.Insert(Object, EventArgs)' could contain the following variables 'sb.ToString()'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Update(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel_PSS.aspx.vb" Line="250">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel_PSS.Update(Object, EventArgs)' could contain the following variables '"update tblopportunities set total = (select sum(total * (percentage/100)) from ..." &amp; Me.Session("OpportunityID") &amp; ") where opportunityid =" &amp; Me.Session("OpportunityID")'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Funnel" File="Funnel_PSS.aspx.vb" Line="246">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Funnel_PSS.Update(Object, EventArgs)' could contain the following variables 'sb.ToString()'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="getForecastBySegments_Mng" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getForecastBySegments_Mng'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getForecastBySegments_Mng+getForecastBySegments_MngDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getForecastBySegments_Mng.getForecastBySegments_MngDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getForecastByTCS" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getForecastByTCS'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getForecastByTCS_Mng" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getForecastByTCS_Mng'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getForecastByTCS_Mng+getforecastbyTCs_MngDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getForecastByTCS_Mng.getforecastbyTCs_MngDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getForecastByTCS+GetForecastByTCsDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getForecastByTCS.GetForecastByTCsDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getForecastByUser_Mg" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getForecastByUser_Mg'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getForecastByUser_Mg+getForecastByUser_MgDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getForecastByUser_Mg.getForecastByUser_MgDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getOpportunities" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getOpportunities'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getOpportunities+getOpportunitiesDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getOpportunities.getOpportunitiesDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getPCGroupingByEnterprise" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getPCGroupingByEnterprise'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getPCGroupingByEnterprise_Mng" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getPCGroupingByEnterprise_Mng'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getPCGroupingByEnterprise_Mng+getPCGroupingByEnterprise_MngDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getPCGroupingByEnterprise_Mng.getPCGroupingByEnterprise_MngDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getPCGroupingByEnterprise+getPCGroupingByEnterpriseDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getPCGroupingByEnterprise.getPCGroupingByEnterpriseDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getTeams" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getTeams'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="getTeams+getTeamsDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'getTeams.getTeamsDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Mg_Forecasts" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddGroupingRowIfTeamHasChanged()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Managers" File="Mg_Forecasts.aspx.vb" Line="49">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Mg_Forecasts.AddGroupingRowIfTeamHasChanged()' could contain the following variables '"SELECT sum(budgeted) as budgeted, sum(managerbudget) FROM [Forecaster].[dbo].[t..." &amp; currentteamNameValue &amp; "'" &amp; " and year = " &amp; Me.Session("Current_Year")'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Update(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Managers" File="Mg_Forecasts.aspx.vb" Line="249">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'Mg_Forecasts.Update(Object, EventArgs)' could contain the following variables 'sb.ToString()'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Mg_Segments" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddGroupingRowIfTeamHasChanged()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Managers" File="Mg_Segments.aspx.vb" Line="79">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Mg_Segments.AddGroupingRowIfTeamHasChanged()' could contain the following variables 'Me.Eval("TerritoryCode")'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NER" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#frmInsert_ItemInserted(System.Object,System.Web.UI.WebControls.FormViewInsertedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\NER" File="NER.aspx.vb" Line="76">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'NER.frmInsert_ItemInserted(Object, FormViewInsertedEventArgs)' could contain the following variables '"update tblNewEmployeeRequest set AttachmentSheetLink = '" &amp; savePath &amp; DirectCast(Me.frmInsert.FindControl("fudialog"), FileUpload).FileName &amp; "' where NERID = " &amp; Me.Session("ID")'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\NER" File="NER.aspx.vb" Line="64">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'NER.frmInsert_ItemInserted(Object, FormViewInsertedEventArgs)' could contain the following variables 'DirectCast(Me.frmInsert.FindControl("ManagerDropDown"), DropDownList).SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmInsert_ItemUpdated(System.Object,System.Web.UI.WebControls.FormViewUpdatedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\NER" File="NER.aspx.vb" Line="106">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'NER.frmInsert_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'DirectCast(Me.frmInsert.FindControl("ManagerDropDown"), DropDownList).SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\NER" File="NER.aspx.vb" Line="117">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'NER.frmInsert_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'DirectCast(Me.frmInsert.FindControl("NERIDLabel1"), Label).Text', 'New String(5)(2)', 'New String(5)(4)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NERManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#frmInsert_ItemInserted(System.Object,System.Web.UI.WebControls.FormViewInsertedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\NER" File="NERManager.aspx.vb" Line="88">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'NERManager.frmInsert_ItemInserted(Object, FormViewInsertedEventArgs)' could contain the following variables '"update tblNewEmployeeRequest set AttachmentSheetLink = '" &amp; savePath &amp; DirectCast(Me.frmInsert.FindControl("fudialog"), FileUpload).FileName &amp; "' where NERID = " &amp; Me.Session("ID")'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\NER" File="NERManager.aspx.vb" Line="76">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'NERManager.frmInsert_ItemInserted(Object, FormViewInsertedEventArgs)' could contain the following variables 'DirectCast(Me.frmInsert.FindControl("ManagerDropDown"), DropDownList).SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmInsert_ItemUpdated(System.Object,System.Web.UI.WebControls.FormViewUpdatedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\NER" File="NERManager.aspx.vb" Line="118">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'NERManager.frmInsert_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'DirectCast(Me.frmInsert.FindControl("ManagerDropDown"), DropDownList).SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\NER" File="NERManager.aspx.vb" Line="129">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'NERManager.frmInsert_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'DirectCast(Me.frmInsert.FindControl("NERIDLabel1"), Label).Text', 'New String(5)(2)', 'New String(5)(4)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Purchase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#frmInsert_DataBound(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Purchase" File="Purchase.aspx.vb" Line="142">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Purchase.frmInsert_DataBound(Object, EventArgs)' could contain the following variables '"select givenname + ' ' + sn as IssuedBy,mail as Email from vwEmployees where 'L..." &amp; Me.Session("Username") &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmInsert_ItemInserted(System.Object,System.Web.UI.WebControls.FormViewInsertedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Purchase" File="Purchase.aspx.vb" Line="28">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Purchase.frmInsert_ItemInserted(Object, FormViewInsertedEventArgs)' could contain the following variables '"update tblPurchaseRequests set Filename = '" &amp; DirectCast(Me.frmInsert.FindControl("fudialog"), FileUpload).FileName &amp; "', Path = '" &amp; savePath &amp; DirectCast(Me.frmInsert.FindControl("fudialog"), FileUpload).FileName &amp; "' where PurchaseRequestID = " &amp; Me.Session("ID")'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Purchase" File="Purchase.aspx.vb" Line="31">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Purchase.frmInsert_ItemInserted(Object, FormViewInsertedEventArgs)' could contain the following variables 'DirectCast(Me.frmInsert.FindControl("ManagerDropDown"), DropDownList).SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmInsert_ItemUpdated(System.Object,System.Web.UI.WebControls.FormViewUpdatedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Purchase" File="Purchase.aspx.vb" Line="78">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Purchase.frmInsert_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'DirectCast(Me.frmInsert.FindControl("ManagerDropDown"), DropDownList).SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Purchase" File="Purchase.aspx.vb" Line="74">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Purchase.frmInsert_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'New String(7)(1)', 'DirectCast(Me.frmInsert.FindControl("IDLabel"), Label).Text', 'New String(7)(4)', 'New String(7)(6)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ManagerDropDown_CustomValidation(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Purchase" File="Purchase.aspx.vb" Line="120">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Purchase.ManagerDropDown_CustomValidation(Object, ServerValidateEventArgs)' could contain the following variables 'DirectCast(Me.frmInsert.FindControl("ManagerDropDown"), DropDownList).SelectedItem.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PurchaseAdmin" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#frmView_ItemUpdated(System.Object,System.Web.UI.WebControls.FormViewUpdatedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Admin" File="PurchaseAdmin.aspx.vb" Line="35">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'PurchaseAdmin.frmView_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables '"update tblpurchaserequests set statusid = 6 where purchaserequestID = " &amp; e.Keys(0)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PurchaseEntry" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#frmView_ItemUpdated(System.Object,System.Web.UI.WebControls.FormViewUpdatedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Purchase" File="PurchaseEntry.aspx.vb" Line="27">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'PurchaseEntry.frmView_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables '"update tblpurchaserequests set statusid = 5 where purchaserequestID = " &amp; e.Keys(0)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Purchase" File="PurchaseEntry.aspx.vb" Line="19">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'PurchaseEntry.frmView_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'DirectCast(Me.frmView.FindControl("BuyerNameTextBox"), Label).Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PurchaseManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#frmView_ItemUpdated(System.Object,System.Web.UI.WebControls.FormViewUpdatedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Purchase" File="PurchaseManager.aspx.vb" Line="58">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'PurchaseManager.frmView_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'DirectCast(Me.frmView.FindControl("BuyerDropDown"), DropDownList).SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Purchase" File="PurchaseManager.aspx.vb" Line="20">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'PurchaseManager.frmView_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'DirectCast(Me.frmView.FindControl("ManagerDropDown"), DropDownList).SelectedItem.Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ManagerDropDownCustomValidator_ServerValidate(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Purchase" File="PurchaseManager.aspx.vb" Line="195">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'PurchaseManager.ManagerDropDownCustomValidator_ServerValidate(Object, ServerValidateEventArgs)' could contain the following variables 'DirectCast(Me.frmView.FindControl("ManagerDropDown"), DropDownList).SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PurchaseCategoryDropDown_SelectedIndexChanged(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Purchase" File="PurchaseManager.aspx.vb" Line="180">The query string passed to 'SqlCommand.CommandText.Set(String)' in 'PurchaseManager.PurchaseCategoryDropDown_SelectedIndexChanged(Object, EventArgs)' could contain the following variables 'DirectCast(Me.frmView.FindControl("PurchaseCategoryDropDown"), DropDownList).SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Purchase" File="PurchaseManager.aspx.vb" Line="171">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'PurchaseManager.PurchaseCategoryDropDown_SelectedIndexChanged(Object, EventArgs)' could contain the following variables 'DirectCast(Me.frmView.FindControl("PurchaseCategoryDropDown"), DropDownList).SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="QLT" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#frmInsert_DataBound(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\QLT" File="QLT.aspx.vb" Line="92">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'QLT.frmInsert_DataBound(Object, EventArgs)' could contain the following variables '"select givenname + ' ' + sn as IssuedBy,mail as Email from vwEmployees where 'L..." &amp; Me.Session("Username") &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCompletionList(System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\QLT" File="QLT.aspx.vb" Line="132">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'QLT.GetCompletionList(String, Integer)' could contain the following variables 'prefixText'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCompletionList_Vendor(System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\QLT" File="QLT.aspx.vb" Line="150">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'QLT.GetCompletionList_Vendor(String, Integer)' could contain the following variables 'prefixText'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="QLTMgmt" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetCompletionList(System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\QLT" File="QLTMgmt.aspx.vb" Line="20">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'QLTMgmt.GetCompletionList(String, Integer)' could contain the following variables 'prefixText'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCompletionList_Vendor(System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\QLT" File="QLTMgmt.aspx.vb" Line="38">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'QLTMgmt.GetCompletionList_Vendor(String, Integer)' could contain the following variables 'prefixText'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Safety" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#frmInsert_DataBound(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Safety" File="Safety.aspx.vb" Line="127">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Safety.frmInsert_DataBound(Object, EventArgs)' could contain the following variables '"select givenname + ' ' + sn as IssuedBy,mail as Email from vwEmployees where 'L..." &amp; Me.Session("Username") &amp; "'"'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmInsert_ItemInserted(System.Object,System.Web.UI.WebControls.FormViewInsertedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Safety" File="Safety.aspx.vb" Line="31">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Safety.frmInsert_ItemInserted(Object, FormViewInsertedEventArgs)' could contain the following variables '"update tblSafetyCases set Filename = '" &amp; DirectCast(Me.frmInsert.FindControl("fudialog"), FileUpload).FileName &amp; "', Path = '" &amp; savePath &amp; DirectCast(Me.frmInsert.FindControl("fudialog"), FileUpload).FileName &amp; "' where SafetyCaseID = " &amp; Me.Session("ID")'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Safety" File="Safety.aspx.vb" Line="35">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Safety.frmInsert_ItemInserted(Object, FormViewInsertedEventArgs)' could contain the following variables 'DirectCast(Me.frmInsert.FindControl("ManagerDropDown"), DropDownList).SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#frmInsert_ItemUpdated(System.Object,System.Web.UI.WebControls.FormViewUpdatedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Safety" File="Safety.aspx.vb" Line="86">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Safety.frmInsert_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'DirectCast(Me.frmInsert.FindControl("ManagerDropDown"), DropDownList).SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Safety" File="Safety.aspx.vb" Line="82">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'Safety.frmInsert_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'New String(7)(1)', 'DirectCast(Me.frmInsert.FindControl("IDTextbox"), Label).Text', 'New String(7)(4)', 'New String(7)(6)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SafetyMgmt" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#frmInsert_ItemUpdated(System.Object,System.Web.UI.WebControls.FormViewUpdatedEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Safety" File="SafetyMgmt.aspx.vb" Line="36">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'SafetyMgmt.frmInsert_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'DirectCast(Me.frmInsert.FindControl("ManagerDropDown"), DropDownList).SelectedValue'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Safety" File="SafetyMgmt.aspx.vb" Line="32">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'SafetyMgmt.frmInsert_ItemUpdated(Object, FormViewUpdatedEventArgs)' could contain the following variables 'New String(7)(1)', 'DirectCast(Me.frmInsert.FindControl("IDTextbox"), Label).Text', 'New String(7)(4)', 'New String(7)(6)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaLtMemberDropDown_DataBinding(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Data\Projects\Forecaster\Forecaster\Safety" File="SafetyMgmt.aspx.vb" Line="77">The query string passed to 'SqlCommand.New(String, SqlConnection)' in 'SafetyMgmt.SaLtMemberDropDown_DataBinding(Object, EventArgs)' could contain the following variables 'Me.gvSafetyCases.SelectedRow.Cells(12).Text'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="setMngrSpec" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2015-04-27 14:55:09Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'setMngrSpec'.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 417</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240">
   <Name>Implement ISerializable correctly</Name>
   <Description>If a type is assignable to ISerializable, it should implement GetObjectData. For unsealed types, the GetObjectData method should be callable and overridable by derived types.</Description>
   <Resolution Name="Default">Add an implementation of GetObjectData to type {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182342(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
